import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:io'; // AJOUT√â pour Platform.isIOS

class NotificationService {
  static final FlutterLocalNotificationsPlugin _notifications =
  FlutterLocalNotificationsPlugin();

  static Future<void> initialize() async {
    print('üîî Initialisation des notifications syst√®me...');

    // Configuration Android
    const AndroidInitializationSettings initializationSettingsAndroid =
    AndroidInitializationSettings('@mipmap/ic_launcher');

    // Configuration iOS am√©lior√©e
    const DarwinInitializationSettings initializationSettingsIOS =
    DarwinInitializationSettings(
      requestSoundPermission: true,
      requestBadgePermission: true,
      requestAlertPermission: true,
      requestCriticalPermission: false, // MODIFI√â : Critical peut causer des probl√®mes
      defaultPresentAlert: true,
      defaultPresentSound: true,
      defaultPresentBadge: true,
      onDidReceiveLocalNotification: onDidReceiveLocalNotification, // AJOUT√â pour iOS ancien
    );

    const InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    // Initialiser le plugin
    await _notifications.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse details) {
        print('üîî Notification cliqu√©e: ${details.payload}');
        _handleNotificationClick(details);
      },
    );

    // Demander les permissions
    await _requestPermissions();

    // Cr√©er le canal de notification pour Android
    await _createNotificationChannel();

    print('‚úÖ Notifications syst√®me initialis√©es');
  }

  // NOUVEAU : Callback pour iOS versions anciennes
  static void onDidReceiveLocalNotification(
      int id,
      String? title,
      String? body,
      String? payload,
      ) async {
    print('üì± [iOS] Notification re√ßue: $title');
  }

  // MODIFI√âE : Demander les permissions avec gestion iOS/Android s√©par√©e
  static Future<void> _requestPermissions() async {
    print('üîê Demande des permissions notifications...');

    try {
      if (Platform.isAndroid) {
        // Permission Android
        if (await Permission.notification.isDenied) {
          final result = await Permission.notification.request();
          print('üì± Permission Android: $result');
        }
      } else if (Platform.isIOS) {
        // Permissions iOS sp√©cifiques
        print('üçé [iOS] Demande permissions sp√©cifiques...');
        final IOSFlutterLocalNotificationsPlugin? iosImplementation =
        _notifications.resolvePlatformSpecificImplementation<
            IOSFlutterLocalNotificationsPlugin>();

        if (iosImplementation != null) {
          final bool? granted = await iosImplementation.requestPermissions(
            alert: true,
            badge: true,
            sound: true,
            critical: false, // MODIFI√â : √âviter critical sur iOS
          );
          print('üì± Permissions iOS accord√©es: $granted');
        }
      }

      // V√©rifier le statut final
      final status = await Permission.notification.status;
      print('üìä Statut final permission notification: $status');
    } catch (e) {
      print('‚ùå Erreur demande permissions: $e');
    }
  }

  // NOUVELLE M√âTHODE : Demander explicitement les permissions iOS
  static Future<bool> requestPermissions() async {
    if (!Platform.isIOS) {
      return await areNotificationsEnabled();
    }

    try {
      print('üì± [iOS] Demande explicite de permissions...');

      final IOSFlutterLocalNotificationsPlugin? iosImplementation =
      _notifications.resolvePlatformSpecificImplementation<
          IOSFlutterLocalNotificationsPlugin>();

      if (iosImplementation != null) {
        final bool? result = await iosImplementation.requestPermissions(
          alert: true,
          badge: true,
          sound: true,
          critical: false,
        );

        print('üì± [iOS] R√©sultat permissions: $result');
        return result ?? false;
      }

      return false;
    } catch (e) {
      print('‚ùå [iOS] Erreur demande permissions: $e');
      return false;
    }
  }

  // MODIFI√âE : V√©rifier les permissions avec plus de d√©tails sur iOS
  static Future<bool> areNotificationsEnabled() async {
    try {
      if (Platform.isIOS) {
        final IOSFlutterLocalNotificationsPlugin? iosImplementation =
        _notifications.resolvePlatformSpecificImplementation<
            IOSFlutterLocalNotificationsPlugin>();

        if (iosImplementation != null) {
          final NotificationsEnabledOptions? result = await iosImplementation.checkPermissions();
          print('üì± [iOS] Permissions v√©rifi√©es: $result');
          // V√©rifier si au moins les alertes sont autoris√©es
          return result?.isEnabled ?? false;
        }
        return false;
      } else {
        // Android - logique existante
        final status = await Permission.notification.status;
        print('üìã [Android] Statut notifications: $status');
        return status == PermissionStatus.granted;
      }
    } catch (e) {
      print('‚ùå Erreur v√©rification permissions: $e');
      return false;
    }
  }

  // Cr√©er un canal de notification pour Android
  static Future<void> _createNotificationChannel() async {
    if (!Platform.isAndroid) return;

    try {
      const AndroidNotificationChannel channel = AndroidNotificationChannel(
        'ouibuddy_high_importance',
        'OuiBuddy Notifications',
        description: 'Notifications importantes de l\'application OuiBuddy',
        importance: Importance.high,
        enableVibration: true,
        playSound: true,
        showBadge: true,
      );

      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
      _notifications.resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>();

      if (androidImplementation != null) {
        await androidImplementation.createNotificationChannel(channel);
        print('üì∫ Canal notification Android cr√©√©');
      }
    } catch (e) {
      print('‚ùå Erreur cr√©ation canal Android: $e');
    }
  }

  // MODIFI√âE : Afficher notification de bienvenue avec gestion iOS
  static Future<void> showWelcomeNotification(String firstName, int userId) async {
    print('üì± [${Platform.isIOS ? "iOS" : "Android"}] Envoi notification syst√®me de bienvenue...');

    try {
      // V√©rifier les permissions d'abord
      final enabled = await areNotificationsEnabled();
      if (!enabled) {
        print('‚ùå Notifications non autoris√©es - tentative d\'activation...');

        if (Platform.isIOS) {
          final granted = await requestPermissions();
          if (!granted) {
            print('‚ùå [iOS] Permissions refus√©es');
            return;
          }
        } else {
          print('‚ùå [Android] Permissions manquantes');
          return;
        }
      }

      // Cr√©er les d√©tails de notification adapt√©s √† la plateforme
      final NotificationDetails notificationDetails = NotificationDetails(
        android: Platform.isAndroid ? AndroidNotificationDetails(
          'ouibuddy_high_importance',
          'OuiBuddy Notifications',
          channelDescription: 'Notifications importantes de l\'application OuiBuddy',
          importance: Importance.high,
          priority: Priority.high,
          icon: '@mipmap/ic_launcher',
          color: Colors.blue,
          enableVibration: true,
          playSound: true,
          showWhen: true,
          styleInformation: BigTextStyleInformation(
            'Bienvenue sur OuiBuddy ! Vous √™tes maintenant connect√© avec succ√®s et sur votre dashboard.',
            summaryText: 'OuiBuddy',
            contentTitle: 'üëã Salut $firstName !',
          ),
        ) : null,
        iOS: Platform.isIOS ? DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
          sound: 'default',
          badgeNumber: 1,
          subtitle: 'Connexion r√©ussie',
          threadIdentifier: 'ouibuddy_welcome',
          interruptionLevel: InterruptionLevel.active,
        ) : null,
      );

      await _notifications.show(
        userId,
        'üëã Salut $firstName !',
        'Connexion r√©ussie ! Vous √™tes sur votre dashboard OuiBuddy.',
        notificationDetails,
        payload: 'welcome_$userId',
      );

      print('‚úÖ [${Platform.isIOS ? "iOS" : "Android"}] Notification syst√®me de bienvenue envoy√©e avec succ√®s');
    } catch (e) {
      print('‚ùå [${Platform.isIOS ? "iOS" : "Android"}] Erreur envoi notification de bienvenue: $e');
    }
  }

  // MODIFI√âE : Afficher notification personnalis√©e avec gestion iOS
  static Future<void> showNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
    bool isImportant = false,
  }) async {
    print('üì± [${Platform.isIOS ? "iOS" : "Android"}] Envoi notification syst√®me personnalis√©e...');

    try {
      final NotificationDetails notificationDetails = NotificationDetails(
        android: Platform.isAndroid ? AndroidNotificationDetails(
          'ouibuddy_high_importance',
          'OuiBuddy Notifications',
          channelDescription: 'Notifications importantes de l\'application OuiBuddy',
          importance: isImportant ? Importance.max : Importance.high,
          priority: isImportant ? Priority.max : Priority.high,
          icon: '@mipmap/ic_launcher',
          color: Colors.blue,
          enableVibration: true,
          playSound: true,
          showWhen: true,
          styleInformation: BigTextStyleInformation(
            body,
            summaryText: 'OuiBuddy',
            contentTitle: title,
          ),
        ) : null,
        iOS: Platform.isIOS ? DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
          sound: 'default',
          subtitle: 'OuiBuddy',
          threadIdentifier: 'ouibuddy_general',
          interruptionLevel: isImportant
              ? InterruptionLevel.timeSensitive  // MODIFI√â : timeSensitive au lieu de critical
              : InterruptionLevel.active,
        ) : null,
      );

      await _notifications.show(
        id,
        title,
        body,
        notificationDetails,
        payload: payload,
      );

      print('‚úÖ [${Platform.isIOS ? "iOS" : "Android"}] Notification syst√®me personnalis√©e envoy√©e');
    } catch (e) {
      print('‚ùå [${Platform.isIOS ? "iOS" : "Android"}] Erreur envoi notification personnalis√©e: $e');
    }
  }

  // MODIFI√âE : Notification de test simple avec gestion iOS
  static Future<void> showTestNotification(String firstName) async {
    print('üß™ [${Platform.isIOS ? "iOS" : "Android"}] Envoi notification de test...');

    try {
      await showNotification(
        id: 999,
        title: 'üß™ Test OuiBuddy ${Platform.isIOS ? "üçé" : "ü§ñ"}',
        body: 'Notification de test pour $firstName - Tout fonctionne sur ${Platform.isIOS ? "iOS" : "Android"} !',
        payload: 'test_notification',
        isImportant: false,
      );

      print('‚úÖ [${Platform.isIOS ? "iOS" : "Android"}] Notification de test envoy√©e');
    } catch (e) {
      print('‚ùå [${Platform.isIOS ? "iOS" : "Android"}] Erreur notification de test: $e');
    }
  }

  // Notification importante (urgente)
  static Future<void> showImportantNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
  }) async {
    print('üö® [${Platform.isIOS ? "iOS" : "Android"}] Envoi notification importante...');

    try {
      await showNotification(
        id: id,
        title: title,
        body: body,
        payload: payload,
        isImportant: true,
      );

      print('‚úÖ [${Platform.isIOS ? "iOS" : "Android"}] Notification importante envoy√©e');
    } catch (e) {
      print('‚ùå [${Platform.isIOS ? "iOS" : "Android"}] Erreur notification importante: $e');
    }
  }

  // MODIFI√âE : Test sp√©cifique iOS
  static Future<void> testIOSNotifications(String userName) async {
    if (!Platform.isIOS) return;

    try {
      print('üì± [iOS] Test sp√©cifique des notifications...');

      // Demander les permissions d'abord
      final bool granted = await requestPermissions();

      if (!granted) {
        print('‚ùå [iOS] Permissions non accord√©es');
        return;
      }

      // Envoyer une notification de test
      await showNotification(
        id: 998,
        title: 'üß™ [iOS] Test Notification',
        body: 'Bonjour $userName ! Les notifications fonctionnent sur iOS üì±',
        payload: 'ios_test',
      );

      print('‚úÖ [iOS] Notification de test envoy√©e');

    } catch (e) {
      print('‚ùå [iOS] Erreur test notifications: $e');
    }
  }

  // G√©rer le clic sur notification
  static void _handleNotificationClick(NotificationResponse details) {
    print('üîî [${Platform.isIOS ? "iOS" : "Android"}] Notification cliqu√©e: ${details.payload}');

    try {
      if (details.payload?.startsWith('welcome_') == true) {
        print('üëã Notification de bienvenue cliqu√©e');
        // Ici vous pouvez naviguer vers une page sp√©cifique
      } else if (details.payload == 'test_notification') {
        print('üß™ Notification de test cliqu√©e');
      } else if (details.payload == 'ios_test') {
        print('üçé Notification de test iOS cliqu√©e');
      } else if (details.payload?.startsWith('scheduled_') == true) {
        print('‚è∞ Notification programm√©e cliqu√©e');
      }
    } catch (e) {
      print('‚ùå Erreur gestion clic notification: $e');
    }
  }

  // MODIFI√âE : Ouvrir les param√®tres avec gestion iOS
  static Future<void> openNotificationSettings() async {
    try {
      print('üîß [${Platform.isIOS ? "iOS" : "Android"}] Ouverture des param√®tres de l\'app...');

      if (Platform.isIOS) {
        // Sur iOS, on ne peut pas ouvrir directement les param√®tres de notifications
        // Mais on peut essayer d'ouvrir les param√®tres de l'app
        await openAppSettings();
        print('üçé [iOS] Param√®tres de l\'app ouverts (l\'utilisateur doit naviguer vers Notifications)');
      } else {
        await openAppSettings();
        print('ü§ñ [Android] Param√®tres ouverts');
      }
    } catch (e) {
      print('‚ùå [${Platform.isIOS ? "iOS" : "Android"}] Erreur ouverture param√®tres: $e');
    }
  }

  // Annuler une notification sp√©cifique
  static Future<void> cancelNotification(int id) async {
    try {
      await _notifications.cancel(id);
      print('‚úÖ [${Platform.isIOS ? "iOS" : "Android"}] Notification $id annul√©e');
    } catch (e) {
      print('‚ùå [${Platform.isIOS ? "iOS" : "Android"}] Erreur annulation notification $id: $e');
    }
  }

  // Annuler toutes les notifications
  static Future<void> cancelAllNotifications() async {
    try {
      await _notifications.cancelAll();
      print('‚úÖ [${Platform.isIOS ? "iOS" : "Android"}] Toutes les notifications annul√©es');
    } catch (e) {
      print('‚ùå [${Platform.isIOS ? "iOS" : "Android"}] Erreur annulation toutes notifications: $e');
    }
  }

  // Obtenir toutes les notifications en attente
  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    try {
      final pending = await _notifications.pendingNotificationRequests();
      print('üìã [${Platform.isIOS ? "iOS" : "Android"}] ${pending.length} notifications en attente');
      return pending;
    } catch (e) {
      print('‚ùå [${Platform.isIOS ? "iOS" : "Android"}] Erreur r√©cup√©ration notifications en attente: $e');
      return [];
    }
  }

  // MODIFI√âE : M√©thode utilitaire pour tester toutes les fonctionnalit√©s
  static Future<void> runFullTest(String firstName, int userId) async {
    print('üß™ === D√âBUT TEST COMPLET NOTIFICATIONS [${Platform.isIOS ? "iOS" : "Android"}] ===');

    try {
      // Test 1: V√©rifier permissions
      bool enabled = await areNotificationsEnabled();
      print('üîê Permissions activ√©es: $enabled');

      if (!enabled && Platform.isIOS) {
        print('üçé [iOS] Tentative d\'activation des permissions...');
        enabled = await requestPermissions();
        print('üçé [iOS] Permissions apr√®s demande: $enabled');
      }

      if (!enabled) {
        print('‚ùå Permissions manquantes - Test arr√™t√©');
        return;
      }

      // Test 2: Notification de bienvenue
      await showWelcomeNotification(firstName, userId);
      await Future.delayed(const Duration(seconds: 2));

      // Test 3: Notification simple
      await showTestNotification(firstName);
      await Future.delayed(const Duration(seconds: 2));

      // Test 4: Test sp√©cifique iOS
      if (Platform.isIOS) {
        await testIOSNotifications(firstName);
        await Future.delayed(const Duration(seconds: 2));
      }

      // Test 5: Notification importante
      await showImportantNotification(
        id: 995,
        title: 'üö® Test Important ${Platform.isIOS ? "üçé" : "ü§ñ"}',
        body: 'Notification critique pour $firstName sur ${Platform.isIOS ? "iOS" : "Android"}',
        payload: 'test_important',
      );

      // Test 6: V√©rifier notifications en attente
      final pending = await getPendingNotifications();
      print('üìã ${pending.length} notifications en attente apr√®s tests');

      print('‚úÖ === TEST COMPLET TERMIN√â [${Platform.isIOS ? "iOS" : "Android"}] ===');
    } catch (e) {
      print('‚ùå [${Platform.isIOS ? "iOS" : "Android"}] Erreur pendant le test complet: $e');
    }
  }
}